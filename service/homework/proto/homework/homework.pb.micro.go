// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/homework/homework.proto

//服务名

package homework

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for HomeworkService service

func NewHomeworkServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for HomeworkService service

type HomeworkService interface {
	AssignHomework(ctx context.Context, in *AssignHomeworkParam, opts ...client.CallOption) (*AssignHomeworkResponse, error)
	DeleteHomework(ctx context.Context, in *HomeworkID, opts ...client.CallOption) (*DeleteHomeworkResponse, error)
	UpdateHomework(ctx context.Context, in *HomeworkInfo, opts ...client.CallOption) (*UpdateHomeworkResponse, error)
	SearchHomework(ctx context.Context, in *HomeworkID, opts ...client.CallOption) (*SearchHomeworkResponse, error)
	GetHomeworkByTeacherID(ctx context.Context, in *TeacherID, opts ...client.CallOption) (*GetHomeworkByTeacherIDResponse, error)
	GetHomeworkByTeacherIDAndCourseID(ctx context.Context, in *GetHomeworkByTeacherIDAndCourseIDParam, opts ...client.CallOption) (*GetHomeworkByTeacherIDAndCourseIDResponse, error)
	GetHomeworkByStudentID(ctx context.Context, in *StudentID, opts ...client.CallOption) (*GetHomeworkByStudentIDResponse, error)
	GetHomeworkByStudentIDAndCourseID(ctx context.Context, in *GetHomeworkByStudentIDAndCourseIDParam, opts ...client.CallOption) (*GetHomeworkByStudentIDAndCourseIDResponse, error)
	GetUserByHomeworkID(ctx context.Context, in *HomeworkID, opts ...client.CallOption) (*GetUserByHomeworkIDResponse, error)
	GetUserHomework(ctx context.Context, in *GetUserHomeworkParam, opts ...client.CallOption) (*GetUserHomeworkResponse, error)
	GetHomeworkByCourseID(ctx context.Context, in *CourseID, opts ...client.CallOption) (*GetHomeworkByCourseIDResponse, error)
	PostHomeworkAnswer(ctx context.Context, in *PostParam, opts ...client.CallOption) (*PostHomeworkAnswerResponse, error)
	ReleaseHomeworkAnswer(ctx context.Context, in *ReleaseParam, opts ...client.CallOption) (*ReleaseHomeworkAnswerResponse, error)
	StudentSearchHomework(ctx context.Context, in *StudentSearchHomeworkParam, opts ...client.CallOption) (*StudentSearchHomeworkResponse, error)
	ReleaseCheck(ctx context.Context, in *ReleaseCheckParam, opts ...client.CallOption) (*ReleaseCheckResponse, error)
}

type homeworkService struct {
	c    client.Client
	name string
}

func NewHomeworkService(name string, c client.Client) HomeworkService {
	return &homeworkService{
		c:    c,
		name: name,
	}
}

func (c *homeworkService) AssignHomework(ctx context.Context, in *AssignHomeworkParam, opts ...client.CallOption) (*AssignHomeworkResponse, error) {
	req := c.c.NewRequest(c.name, "HomeworkService.AssignHomework", in)
	out := new(AssignHomeworkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkService) DeleteHomework(ctx context.Context, in *HomeworkID, opts ...client.CallOption) (*DeleteHomeworkResponse, error) {
	req := c.c.NewRequest(c.name, "HomeworkService.DeleteHomework", in)
	out := new(DeleteHomeworkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkService) UpdateHomework(ctx context.Context, in *HomeworkInfo, opts ...client.CallOption) (*UpdateHomeworkResponse, error) {
	req := c.c.NewRequest(c.name, "HomeworkService.UpdateHomework", in)
	out := new(UpdateHomeworkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkService) SearchHomework(ctx context.Context, in *HomeworkID, opts ...client.CallOption) (*SearchHomeworkResponse, error) {
	req := c.c.NewRequest(c.name, "HomeworkService.SearchHomework", in)
	out := new(SearchHomeworkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkService) GetHomeworkByTeacherID(ctx context.Context, in *TeacherID, opts ...client.CallOption) (*GetHomeworkByTeacherIDResponse, error) {
	req := c.c.NewRequest(c.name, "HomeworkService.GetHomeworkByTeacherID", in)
	out := new(GetHomeworkByTeacherIDResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkService) GetHomeworkByTeacherIDAndCourseID(ctx context.Context, in *GetHomeworkByTeacherIDAndCourseIDParam, opts ...client.CallOption) (*GetHomeworkByTeacherIDAndCourseIDResponse, error) {
	req := c.c.NewRequest(c.name, "HomeworkService.GetHomeworkByTeacherIDAndCourseID", in)
	out := new(GetHomeworkByTeacherIDAndCourseIDResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkService) GetHomeworkByStudentID(ctx context.Context, in *StudentID, opts ...client.CallOption) (*GetHomeworkByStudentIDResponse, error) {
	req := c.c.NewRequest(c.name, "HomeworkService.GetHomeworkByStudentID", in)
	out := new(GetHomeworkByStudentIDResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkService) GetHomeworkByStudentIDAndCourseID(ctx context.Context, in *GetHomeworkByStudentIDAndCourseIDParam, opts ...client.CallOption) (*GetHomeworkByStudentIDAndCourseIDResponse, error) {
	req := c.c.NewRequest(c.name, "HomeworkService.GetHomeworkByStudentIDAndCourseID", in)
	out := new(GetHomeworkByStudentIDAndCourseIDResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkService) GetUserByHomeworkID(ctx context.Context, in *HomeworkID, opts ...client.CallOption) (*GetUserByHomeworkIDResponse, error) {
	req := c.c.NewRequest(c.name, "HomeworkService.GetUserByHomeworkID", in)
	out := new(GetUserByHomeworkIDResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkService) GetUserHomework(ctx context.Context, in *GetUserHomeworkParam, opts ...client.CallOption) (*GetUserHomeworkResponse, error) {
	req := c.c.NewRequest(c.name, "HomeworkService.GetUserHomework", in)
	out := new(GetUserHomeworkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkService) GetHomeworkByCourseID(ctx context.Context, in *CourseID, opts ...client.CallOption) (*GetHomeworkByCourseIDResponse, error) {
	req := c.c.NewRequest(c.name, "HomeworkService.GetHomeworkByCourseID", in)
	out := new(GetHomeworkByCourseIDResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkService) PostHomeworkAnswer(ctx context.Context, in *PostParam, opts ...client.CallOption) (*PostHomeworkAnswerResponse, error) {
	req := c.c.NewRequest(c.name, "HomeworkService.PostHomeworkAnswer", in)
	out := new(PostHomeworkAnswerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkService) ReleaseHomeworkAnswer(ctx context.Context, in *ReleaseParam, opts ...client.CallOption) (*ReleaseHomeworkAnswerResponse, error) {
	req := c.c.NewRequest(c.name, "HomeworkService.ReleaseHomeworkAnswer", in)
	out := new(ReleaseHomeworkAnswerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkService) StudentSearchHomework(ctx context.Context, in *StudentSearchHomeworkParam, opts ...client.CallOption) (*StudentSearchHomeworkResponse, error) {
	req := c.c.NewRequest(c.name, "HomeworkService.StudentSearchHomework", in)
	out := new(StudentSearchHomeworkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkService) ReleaseCheck(ctx context.Context, in *ReleaseCheckParam, opts ...client.CallOption) (*ReleaseCheckResponse, error) {
	req := c.c.NewRequest(c.name, "HomeworkService.ReleaseCheck", in)
	out := new(ReleaseCheckResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HomeworkService service

type HomeworkServiceHandler interface {
	AssignHomework(context.Context, *AssignHomeworkParam, *AssignHomeworkResponse) error
	DeleteHomework(context.Context, *HomeworkID, *DeleteHomeworkResponse) error
	UpdateHomework(context.Context, *HomeworkInfo, *UpdateHomeworkResponse) error
	SearchHomework(context.Context, *HomeworkID, *SearchHomeworkResponse) error
	GetHomeworkByTeacherID(context.Context, *TeacherID, *GetHomeworkByTeacherIDResponse) error
	GetHomeworkByTeacherIDAndCourseID(context.Context, *GetHomeworkByTeacherIDAndCourseIDParam, *GetHomeworkByTeacherIDAndCourseIDResponse) error
	GetHomeworkByStudentID(context.Context, *StudentID, *GetHomeworkByStudentIDResponse) error
	GetHomeworkByStudentIDAndCourseID(context.Context, *GetHomeworkByStudentIDAndCourseIDParam, *GetHomeworkByStudentIDAndCourseIDResponse) error
	GetUserByHomeworkID(context.Context, *HomeworkID, *GetUserByHomeworkIDResponse) error
	GetUserHomework(context.Context, *GetUserHomeworkParam, *GetUserHomeworkResponse) error
	GetHomeworkByCourseID(context.Context, *CourseID, *GetHomeworkByCourseIDResponse) error
	PostHomeworkAnswer(context.Context, *PostParam, *PostHomeworkAnswerResponse) error
	ReleaseHomeworkAnswer(context.Context, *ReleaseParam, *ReleaseHomeworkAnswerResponse) error
	StudentSearchHomework(context.Context, *StudentSearchHomeworkParam, *StudentSearchHomeworkResponse) error
	ReleaseCheck(context.Context, *ReleaseCheckParam, *ReleaseCheckResponse) error
}

func RegisterHomeworkServiceHandler(s server.Server, hdlr HomeworkServiceHandler, opts ...server.HandlerOption) error {
	type homeworkService interface {
		AssignHomework(ctx context.Context, in *AssignHomeworkParam, out *AssignHomeworkResponse) error
		DeleteHomework(ctx context.Context, in *HomeworkID, out *DeleteHomeworkResponse) error
		UpdateHomework(ctx context.Context, in *HomeworkInfo, out *UpdateHomeworkResponse) error
		SearchHomework(ctx context.Context, in *HomeworkID, out *SearchHomeworkResponse) error
		GetHomeworkByTeacherID(ctx context.Context, in *TeacherID, out *GetHomeworkByTeacherIDResponse) error
		GetHomeworkByTeacherIDAndCourseID(ctx context.Context, in *GetHomeworkByTeacherIDAndCourseIDParam, out *GetHomeworkByTeacherIDAndCourseIDResponse) error
		GetHomeworkByStudentID(ctx context.Context, in *StudentID, out *GetHomeworkByStudentIDResponse) error
		GetHomeworkByStudentIDAndCourseID(ctx context.Context, in *GetHomeworkByStudentIDAndCourseIDParam, out *GetHomeworkByStudentIDAndCourseIDResponse) error
		GetUserByHomeworkID(ctx context.Context, in *HomeworkID, out *GetUserByHomeworkIDResponse) error
		GetUserHomework(ctx context.Context, in *GetUserHomeworkParam, out *GetUserHomeworkResponse) error
		GetHomeworkByCourseID(ctx context.Context, in *CourseID, out *GetHomeworkByCourseIDResponse) error
		PostHomeworkAnswer(ctx context.Context, in *PostParam, out *PostHomeworkAnswerResponse) error
		ReleaseHomeworkAnswer(ctx context.Context, in *ReleaseParam, out *ReleaseHomeworkAnswerResponse) error
		StudentSearchHomework(ctx context.Context, in *StudentSearchHomeworkParam, out *StudentSearchHomeworkResponse) error
		ReleaseCheck(ctx context.Context, in *ReleaseCheckParam, out *ReleaseCheckResponse) error
	}
	type HomeworkService struct {
		homeworkService
	}
	h := &homeworkServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&HomeworkService{h}, opts...))
}

type homeworkServiceHandler struct {
	HomeworkServiceHandler
}

func (h *homeworkServiceHandler) AssignHomework(ctx context.Context, in *AssignHomeworkParam, out *AssignHomeworkResponse) error {
	return h.HomeworkServiceHandler.AssignHomework(ctx, in, out)
}

func (h *homeworkServiceHandler) DeleteHomework(ctx context.Context, in *HomeworkID, out *DeleteHomeworkResponse) error {
	return h.HomeworkServiceHandler.DeleteHomework(ctx, in, out)
}

func (h *homeworkServiceHandler) UpdateHomework(ctx context.Context, in *HomeworkInfo, out *UpdateHomeworkResponse) error {
	return h.HomeworkServiceHandler.UpdateHomework(ctx, in, out)
}

func (h *homeworkServiceHandler) SearchHomework(ctx context.Context, in *HomeworkID, out *SearchHomeworkResponse) error {
	return h.HomeworkServiceHandler.SearchHomework(ctx, in, out)
}

func (h *homeworkServiceHandler) GetHomeworkByTeacherID(ctx context.Context, in *TeacherID, out *GetHomeworkByTeacherIDResponse) error {
	return h.HomeworkServiceHandler.GetHomeworkByTeacherID(ctx, in, out)
}

func (h *homeworkServiceHandler) GetHomeworkByTeacherIDAndCourseID(ctx context.Context, in *GetHomeworkByTeacherIDAndCourseIDParam, out *GetHomeworkByTeacherIDAndCourseIDResponse) error {
	return h.HomeworkServiceHandler.GetHomeworkByTeacherIDAndCourseID(ctx, in, out)
}

func (h *homeworkServiceHandler) GetHomeworkByStudentID(ctx context.Context, in *StudentID, out *GetHomeworkByStudentIDResponse) error {
	return h.HomeworkServiceHandler.GetHomeworkByStudentID(ctx, in, out)
}

func (h *homeworkServiceHandler) GetHomeworkByStudentIDAndCourseID(ctx context.Context, in *GetHomeworkByStudentIDAndCourseIDParam, out *GetHomeworkByStudentIDAndCourseIDResponse) error {
	return h.HomeworkServiceHandler.GetHomeworkByStudentIDAndCourseID(ctx, in, out)
}

func (h *homeworkServiceHandler) GetUserByHomeworkID(ctx context.Context, in *HomeworkID, out *GetUserByHomeworkIDResponse) error {
	return h.HomeworkServiceHandler.GetUserByHomeworkID(ctx, in, out)
}

func (h *homeworkServiceHandler) GetUserHomework(ctx context.Context, in *GetUserHomeworkParam, out *GetUserHomeworkResponse) error {
	return h.HomeworkServiceHandler.GetUserHomework(ctx, in, out)
}

func (h *homeworkServiceHandler) GetHomeworkByCourseID(ctx context.Context, in *CourseID, out *GetHomeworkByCourseIDResponse) error {
	return h.HomeworkServiceHandler.GetHomeworkByCourseID(ctx, in, out)
}

func (h *homeworkServiceHandler) PostHomeworkAnswer(ctx context.Context, in *PostParam, out *PostHomeworkAnswerResponse) error {
	return h.HomeworkServiceHandler.PostHomeworkAnswer(ctx, in, out)
}

func (h *homeworkServiceHandler) ReleaseHomeworkAnswer(ctx context.Context, in *ReleaseParam, out *ReleaseHomeworkAnswerResponse) error {
	return h.HomeworkServiceHandler.ReleaseHomeworkAnswer(ctx, in, out)
}

func (h *homeworkServiceHandler) StudentSearchHomework(ctx context.Context, in *StudentSearchHomeworkParam, out *StudentSearchHomeworkResponse) error {
	return h.HomeworkServiceHandler.StudentSearchHomework(ctx, in, out)
}

func (h *homeworkServiceHandler) ReleaseCheck(ctx context.Context, in *ReleaseCheckParam, out *ReleaseCheckResponse) error {
	return h.HomeworkServiceHandler.ReleaseCheck(ctx, in, out)
}
