// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user/user.proto

//服务名

package user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserService service

func NewUserServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserService service

type UserService interface {
	RegisterAdmin(ctx context.Context, in *RegisterUserParam, opts ...client.CallOption) (*RegisterUserResponse, error)
	RegisterTeacher(ctx context.Context, in *RegisterUserParam, opts ...client.CallOption) (*RegisterUserResponse, error)
	RegisterStudent(ctx context.Context, in *RegisterUserParam, opts ...client.CallOption) (*RegisterUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserParam, opts ...client.CallOption) (*UpdateUserResponse, error)
	SearchUser(ctx context.Context, in *UserID, opts ...client.CallOption) (*SearchUserResponse, error)
	SearchUsers(ctx context.Context, in *UserIDArray, opts ...client.CallOption) (*SearchUsersResponse, error)
	GetAllUsers(ctx context.Context, in *GetAllUsersParam, opts ...client.CallOption) (*GetAllUsersResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) RegisterAdmin(ctx context.Context, in *RegisterUserParam, opts ...client.CallOption) (*RegisterUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.RegisterAdmin", in)
	out := new(RegisterUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) RegisterTeacher(ctx context.Context, in *RegisterUserParam, opts ...client.CallOption) (*RegisterUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.RegisterTeacher", in)
	out := new(RegisterUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) RegisterStudent(ctx context.Context, in *RegisterUserParam, opts ...client.CallOption) (*RegisterUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.RegisterStudent", in)
	out := new(RegisterUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUser(ctx context.Context, in *UpdateUserParam, opts ...client.CallOption) (*UpdateUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.UpdateUser", in)
	out := new(UpdateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) SearchUser(ctx context.Context, in *UserID, opts ...client.CallOption) (*SearchUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.SearchUser", in)
	out := new(SearchUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) SearchUsers(ctx context.Context, in *UserIDArray, opts ...client.CallOption) (*SearchUsersResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.SearchUsers", in)
	out := new(SearchUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetAllUsers(ctx context.Context, in *GetAllUsersParam, opts ...client.CallOption) (*GetAllUsersResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetAllUsers", in)
	out := new(GetAllUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	RegisterAdmin(context.Context, *RegisterUserParam, *RegisterUserResponse) error
	RegisterTeacher(context.Context, *RegisterUserParam, *RegisterUserResponse) error
	RegisterStudent(context.Context, *RegisterUserParam, *RegisterUserResponse) error
	UpdateUser(context.Context, *UpdateUserParam, *UpdateUserResponse) error
	SearchUser(context.Context, *UserID, *SearchUserResponse) error
	SearchUsers(context.Context, *UserIDArray, *SearchUsersResponse) error
	GetAllUsers(context.Context, *GetAllUsersParam, *GetAllUsersResponse) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		RegisterAdmin(ctx context.Context, in *RegisterUserParam, out *RegisterUserResponse) error
		RegisterTeacher(ctx context.Context, in *RegisterUserParam, out *RegisterUserResponse) error
		RegisterStudent(ctx context.Context, in *RegisterUserParam, out *RegisterUserResponse) error
		UpdateUser(ctx context.Context, in *UpdateUserParam, out *UpdateUserResponse) error
		SearchUser(ctx context.Context, in *UserID, out *SearchUserResponse) error
		SearchUsers(ctx context.Context, in *UserIDArray, out *SearchUsersResponse) error
		GetAllUsers(ctx context.Context, in *GetAllUsersParam, out *GetAllUsersResponse) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) RegisterAdmin(ctx context.Context, in *RegisterUserParam, out *RegisterUserResponse) error {
	return h.UserServiceHandler.RegisterAdmin(ctx, in, out)
}

func (h *userServiceHandler) RegisterTeacher(ctx context.Context, in *RegisterUserParam, out *RegisterUserResponse) error {
	return h.UserServiceHandler.RegisterTeacher(ctx, in, out)
}

func (h *userServiceHandler) RegisterStudent(ctx context.Context, in *RegisterUserParam, out *RegisterUserResponse) error {
	return h.UserServiceHandler.RegisterStudent(ctx, in, out)
}

func (h *userServiceHandler) UpdateUser(ctx context.Context, in *UpdateUserParam, out *UpdateUserResponse) error {
	return h.UserServiceHandler.UpdateUser(ctx, in, out)
}

func (h *userServiceHandler) SearchUser(ctx context.Context, in *UserID, out *SearchUserResponse) error {
	return h.UserServiceHandler.SearchUser(ctx, in, out)
}

func (h *userServiceHandler) SearchUsers(ctx context.Context, in *UserIDArray, out *SearchUsersResponse) error {
	return h.UserServiceHandler.SearchUsers(ctx, in, out)
}

func (h *userServiceHandler) GetAllUsers(ctx context.Context, in *GetAllUsersParam, out *GetAllUsersResponse) error {
	return h.UserServiceHandler.GetAllUsers(ctx, in, out)
}
