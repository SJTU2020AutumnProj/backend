//声明proto本版
syntax = "proto3";
//服务名
package go.micro.service.user;
//生成go文件的包路径
option go_package = "proto/user";

//定义task服务的接口，主要是增删改查
//结构非常类似于go语言的interface定义，只是返回值必须用括号包裹，且不能使用基本类型作为参数或返回值
service UserService {
  rpc AddUser(User)returns (EditResponse){}
  rpc RegisterAdmin(UserInfo)returns (RegisterResponse){}
  rpc RegisterTeacher(UserInfo)returns (RegisterResponse){}
  rpc RegisterStudent(UserInfo)returns (RegisterResponse){}
  rpc DeleteUser(UserID)returns (EditResponse){}
  rpc UpdateUser(User)returns (EditResponse){}
  rpc SearchUser(UserID)returns (SearchResponse){}
  rpc SearchUsers(UserIDArray)returns (SearchUsersResponse){}
}

message User {
    int32 userID = 1;
    int32 userType = 2;
    string userName = 3;
    string password = 4;
    string school = 5;
    string id = 6;
    string phone = 7;
    string email = 8;
}

message UserInfo {
    string userName = 1;
    string password = 2;
    string school = 3;
    string id = 4;
    string phone = 5;
    string email = 6;
}

message RegisterResponse {
    enum Status {
        SUCCESS = 0;
        ERROR = -1;
    }
    Status status = 1;
    string msg = 2;
}

message UserID {
    int32 userID = 1;
}

message EditResponse {
    enum Status {
        SUCCESS = 0;
        ERROR = -1;
    }
    Status status = 1;
    string msg = 2;
}

message SearchResponse {
    enum Status {
        SUCCESS = 0;       
        ERROR = -1;
    }
    Status status = 1;
    string msg = 2;
    User user = 3;
}

message UserIDArray {
    repeated int32 IDArray = 1;
}

message SearchUsersResponse {
    enum Status {
        SUCCESS = 0;       
        ERROR = -1;
    }
    Status status = 1;
    string msg = 2;
    repeated User users = 3;
}