// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/verification/verification.proto

//服务名

package verification

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for VerificationService service

func NewVerificationServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for VerificationService service

type VerificationService interface {
	SendCodeEmail(ctx context.Context, in *SendCodeEmailParam, opts ...client.CallOption) (*SendCodeEmailResponse, error)
	VerifyCodeEmail(ctx context.Context, in *VerifyCodeEmailParam, opts ...client.CallOption) (*VerifyCodeEmailResponse, error)
}

type verificationService struct {
	c    client.Client
	name string
}

func NewVerificationService(name string, c client.Client) VerificationService {
	return &verificationService{
		c:    c,
		name: name,
	}
}

func (c *verificationService) SendCodeEmail(ctx context.Context, in *SendCodeEmailParam, opts ...client.CallOption) (*SendCodeEmailResponse, error) {
	req := c.c.NewRequest(c.name, "VerificationService.SendCodeEmail", in)
	out := new(SendCodeEmailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verificationService) VerifyCodeEmail(ctx context.Context, in *VerifyCodeEmailParam, opts ...client.CallOption) (*VerifyCodeEmailResponse, error) {
	req := c.c.NewRequest(c.name, "VerificationService.VerifyCodeEmail", in)
	out := new(VerifyCodeEmailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VerificationService service

type VerificationServiceHandler interface {
	SendCodeEmail(context.Context, *SendCodeEmailParam, *SendCodeEmailResponse) error
	VerifyCodeEmail(context.Context, *VerifyCodeEmailParam, *VerifyCodeEmailResponse) error
}

func RegisterVerificationServiceHandler(s server.Server, hdlr VerificationServiceHandler, opts ...server.HandlerOption) error {
	type verificationService interface {
		SendCodeEmail(ctx context.Context, in *SendCodeEmailParam, out *SendCodeEmailResponse) error
		VerifyCodeEmail(ctx context.Context, in *VerifyCodeEmailParam, out *VerifyCodeEmailResponse) error
	}
	type VerificationService struct {
		verificationService
	}
	h := &verificationServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&VerificationService{h}, opts...))
}

type verificationServiceHandler struct {
	VerificationServiceHandler
}

func (h *verificationServiceHandler) SendCodeEmail(ctx context.Context, in *SendCodeEmailParam, out *SendCodeEmailResponse) error {
	return h.VerificationServiceHandler.SendCodeEmail(ctx, in, out)
}

func (h *verificationServiceHandler) VerifyCodeEmail(ctx context.Context, in *VerifyCodeEmailParam, out *VerifyCodeEmailResponse) error {
	return h.VerificationServiceHandler.VerifyCodeEmail(ctx, in, out)
}
